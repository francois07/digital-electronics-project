
CProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000646  000006da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800128  00800128  00000702  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000702  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000734  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019db  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c91  00000000  00000000  000022ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c95  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00003c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000727  00000000  00000000  00003fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da3  00000000  00000000  000046e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005486  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 94 02 	jmp	0x528	; 0x528 <__vector_18>
  4c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 36       	cpi	r26, 0x6D	; 109
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  9e:	0c 94 21 03 	jmp	0x642	; 0x642 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name |= (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_toggle>:

/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num){
	*reg_name ^= (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_toggle+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_toggle+0xa>
  ea:	24 27       	eor	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <toggle_e+0x8>
  fc:	00 00       	nop
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	85 b9       	out	0x05, r24	; 5
 104:	08 95       	ret

00000106 <lcd_write>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	66 23       	and	r22, r22
 10c:	21 f0       	breq	.+8      	; 0x116 <lcd_write+0x10>
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	81 60       	ori	r24, 0x01	; 1
 112:	85 b9       	out	0x05, r24	; 5
 114:	03 c0       	rjmp	.+6      	; 0x11c <lcd_write+0x16>
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	8a b1       	in	r24, 0x0a	; 10
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	8a b9       	out	0x0a, r24	; 10
 122:	8a b1       	in	r24, 0x0a	; 10
 124:	80 62       	ori	r24, 0x20	; 32
 126:	8a b9       	out	0x0a, r24	; 10
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	8a b9       	out	0x0a, r24	; 10
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	80 68       	ori	r24, 0x80	; 128
 132:	8a b9       	out	0x0a, r24	; 10
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 77       	andi	r24, 0x7F	; 127
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7d       	andi	r24, 0xDF	; 223
 144:	8b b9       	out	0x0b, r24	; 11
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	8b b9       	out	0x0b, r24	; 11
 14c:	cc 23       	and	r28, r28
 14e:	1c f4       	brge	.+6      	; 0x156 <lcd_write+0x50>
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8b b9       	out	0x0b, r24	; 11
 156:	c6 ff       	sbrs	r28, 6
 158:	03 c0       	rjmp	.+6      	; 0x160 <lcd_write+0x5a>
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	c5 ff       	sbrs	r28, 5
 162:	03 c0       	rjmp	.+6      	; 0x16a <lcd_write+0x64>
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	80 62       	ori	r24, 0x20	; 32
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	c4 ff       	sbrs	r28, 4
 16c:	03 c0       	rjmp	.+6      	; 0x174 <lcd_write+0x6e>
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 61       	ori	r24, 0x10	; 16
 172:	8b b9       	out	0x0b, r24	; 11
 174:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	8f 77       	andi	r24, 0x7F	; 127
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 7d       	andi	r24, 0xDF	; 223
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	c3 ff       	sbrs	r28, 3
 192:	03 c0       	rjmp	.+6      	; 0x19a <lcd_write+0x94>
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	80 68       	ori	r24, 0x80	; 128
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	c2 ff       	sbrs	r28, 2
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <lcd_write+0x9e>
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	c1 ff       	sbrs	r28, 1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <lcd_write+0xa8>
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	c0 ff       	sbrs	r28, 0
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_write+0xb2>
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	87 eb       	ldi	r24, 0xB7	; 183
 1d6:	9b e0       	ldi	r25, 0x0B	; 11
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_write+0xd2>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_write+0xd8>
 1de:	00 00       	nop
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_command>:
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 1ea:	08 95       	ret

000001ec <lcd_gotoxy>:
 1ec:	61 11       	cpse	r22, r1
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <lcd_gotoxy+0xc>
 1f0:	80 58       	subi	r24, 0x80	; 128
 1f2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 1f6:	08 95       	ret
 1f8:	80 54       	subi	r24, 0x40	; 64
 1fa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 1fe:	08 95       	ret

00000200 <lcd_clrscr>:
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 206:	08 95       	ret

00000208 <lcd_putc>:
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 20e:	08 95       	ret

00000210 <lcd_puts>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	fc 01       	movw	r30, r24
 216:	03 c0       	rjmp	.+6      	; 0x21e <lcd_puts+0xe>
 218:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
 21c:	fe 01       	movw	r30, r28
 21e:	ef 01       	movw	r28, r30
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	80 81       	ld	r24, Z
 224:	81 11       	cpse	r24, r1
 226:	f8 cf       	rjmp	.-16     	; 0x218 <lcd_puts+0x8>
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 22e:	cf 93       	push	r28
 230:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 232:	84 b1       	in	r24, 0x04	; 4
 234:	81 60       	ori	r24, 0x01	; 1
 236:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 238:	8a b1       	in	r24, 0x0a	; 10
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	82 60       	ori	r24, 0x02	; 2
 242:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 244:	8a b1       	in	r24, 0x0a	; 10
 246:	80 61       	ori	r24, 0x10	; 16
 248:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 24a:	8a b1       	in	r24, 0x0a	; 10
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 250:	8a b1       	in	r24, 0x0a	; 10
 252:	80 64       	ori	r24, 0x40	; 64
 254:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 256:	8a b1       	in	r24, 0x0a	; 10
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	99 ef       	ldi	r25, 0xF9	; 249
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x32>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0x38>
 266:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	80 62       	ori	r24, 0x20	; 32
 26c:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	80 61       	ori	r24, 0x10	; 16
 272:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 274:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 278:	8f e1       	ldi	r24, 0x1F	; 31
 27a:	9e e4       	ldi	r25, 0x4E	; 78
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init+0x4e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_init+0x54>
 282:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 284:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x5e>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_init+0x64>
 292:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 294:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x6e>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_init+0x74>
 2a2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	8f 7e       	andi	r24, 0xEF	; 239
 2a8:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2aa:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_init+0x84>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_init+0x8a>
 2b8:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2ba:	88 e2       	ldi	r24, 0x28	; 40
 2bc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2c0:	88 e0       	ldi	r24, 0x08	; 8
 2c2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2c6:	0e 94 00 01 	call	0x200	; 0x200 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2d0:	8c 2f       	mov	r24, r28
 2d2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
}/* lcd_init */
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD Display
    lcd_init(LCD_DISP_ON);
 2da:	8c e0       	ldi	r24, 0x0C	; 12
 2dc:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_init>
    lcd_gotoxy(0, 0);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
    lcd_puts("De2");
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
    lcd_gotoxy(0, 1);
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
    lcd_puts("Meteo Station");
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
    
    // Initialize I2C (TWI)
    twi_init();
 300:	0e 94 50 02 	call	0x4a0	; 0x4a0 <twi_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_4s();
 304:	e1 e8       	ldi	r30, 0x81	; 129
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	8d 7f       	andi	r24, 0xFD	; 253
 30c:	80 83       	st	Z, r24
 30e:	80 81       	ld	r24, Z
 310:	85 60       	ori	r24, 0x05	; 5
 312:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 314:	ef e6       	ldi	r30, 0x6F	; 111
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 31e:	78 94       	sei
    
    // Configure the first motor at port A
    GPIO_config_output(&DDRD, MOTOR1);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	8a e2       	ldi	r24, 0x2A	; 42
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTD, MOTOR1);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	8b e2       	ldi	r24, 0x2B	; 43
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    // Infinite loop
    while (1)
    {
        /* Empty loop. All subsequent operations are performed exclusively 
         * inside interrupt service routines ISRs */
        GPIO_toggle(&PORTD, MOTOR1);
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	8b e2       	ldi	r24, 0x2B	; 43
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
 33e:	8f e3       	ldi	r24, 0x3F	; 63
 340:	9f e1       	ldi	r25, 0x1F	; 31
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0x68>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x6e>
 348:	00 00       	nop
        _delay_us(2000);
        GPIO_toggle(&PORTD, MOTOR1);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	8b e2       	ldi	r24, 0x2B	; 43
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
 354:	8f e9       	ldi	r24, 0x9F	; 159
 356:	9f e0       	ldi	r25, 0x0F	; 15
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x7e>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x84>
 35e:	00 00       	nop
        _delay_us(1000);
        
        GPIO_toggle(&PORTD, MOTOR1);
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	8b e2       	ldi	r24, 0x2B	; 43
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
 36a:	8f e9       	ldi	r24, 0x9F	; 159
 36c:	9f e0       	ldi	r25, 0x0F	; 15
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <main+0x94>
 372:	00 c0       	rjmp	.+0      	; 0x374 <main+0x9a>
 374:	00 00       	nop
        _delay_us(1000);
        GPIO_toggle(&PORTD, MOTOR1);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	8b e2       	ldi	r24, 0x2B	; 43
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
 380:	8f e9       	ldi	r24, 0x9F	; 159
 382:	9f e0       	ldi	r25, 0x0F	; 15
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <main+0xaa>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0xb0>
 38a:	00 00       	nop
 38c:	d3 cf       	rjmp	.-90     	; 0x334 <main+0x5a>

0000038e <displaySensor>:
    // Will never reach this
    return 0;
}

void displaySensor(char title[], uint8_t slave_adress, uint8_t reg_adress)
{
 38e:	ef 92       	push	r14
 390:	ff 92       	push	r15
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	00 d0       	rcall	.+0      	; 0x39c <displaySensor+0xe>
 39c:	00 d0       	rcall	.+0      	; 0x39e <displaySensor+0x10>
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	7c 01       	movw	r14, r24
 3a4:	16 2f       	mov	r17, r22
 3a6:	04 2f       	mov	r16, r20
    uint8_t result = 1;
    char uart_string[] = "000";
 3a8:	80 e3       	ldi	r24, 0x30	; 48
 3aa:	90 e3       	ldi	r25, 0x30	; 48
 3ac:	9a 83       	std	Y+2, r25	; 0x02
 3ae:	89 83       	std	Y+1, r24	; 0x01
 3b0:	80 e3       	ldi	r24, 0x30	; 48
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	9c 83       	std	Y+4, r25	; 0x04
 3b6:	8b 83       	std	Y+3, r24	; 0x03
    
    lcd_gotoxy(1, 0);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
    lcd_puts(title);
 3c0:	c7 01       	movw	r24, r14
 3c2:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
        
    twi_start((slave_adress<<1) + TWI_WRITE);
 3c6:	11 0f       	add	r17, r17
 3c8:	81 2f       	mov	r24, r17
 3ca:	0e 94 5f 02 	call	0x4be	; 0x4be <twi_start>
    twi_write(reg_adress);
 3ce:	80 2f       	mov	r24, r16
 3d0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <twi_write>
    twi_stop();
 3d4:	0e 94 90 02 	call	0x520	; 0x520 <twi_stop>
        
    twi_start((slave_adress<<1) + TWI_READ);
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	81 0f       	add	r24, r17
 3dc:	0e 94 5f 02 	call	0x4be	; 0x4be <twi_start>
    result = twi_read_ack();
 3e0:	0e 94 86 02 	call	0x50c	; 0x50c <twi_read_ack>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3e4:	4a e0       	ldi	r20, 0x0A	; 10
 3e6:	be 01       	movw	r22, r28
 3e8:	6f 5f       	subi	r22, 0xFF	; 255
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__itoa_ncheck>
        
    itoa(result, uart_string, 10);
        
    lcd_gotoxy(0, 1);
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
    lcd_puts(uart_string);
 3fa:	ce 01       	movw	r24, r28
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
}
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	ff 90       	pop	r15
 414:	ef 90       	pop	r14
 416:	08 95       	ret

00000418 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and get humidity, temperature,
 *           and checksum from DHT12 sensor.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	3f 93       	push	r19
 426:	4f 93       	push	r20
 428:	5f 93       	push	r21
 42a:	6f 93       	push	r22
 42c:	7f 93       	push	r23
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
 432:	af 93       	push	r26
 434:	bf 93       	push	r27
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
    static state_t state = STATE_TEMP;  // Current state of the FSM
    static uint8_t addr = 0x5c;  // I2C slave address of DHT12

    // FSM
    switch (state)
 43a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	19 f0       	breq	.+6      	; 0x448 <__vector_13+0x30>
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	69 f0       	breq	.+26     	; 0x460 <__vector_13+0x48>
 446:	18 c0       	rjmp	.+48     	; 0x478 <__vector_13+0x60>
    {
    // Get humidity
    case STATE_HUMID:
        lcd_clrscr();
 448:	0e 94 00 01 	call	0x200	; 0x200 <lcd_clrscr>

        displaySensor("HUMIDITY", addr, 0x00);
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	6c e5       	ldi	r22, 0x5C	; 92
 450:	83 e1       	ldi	r24, 0x13	; 19
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	0e 94 c7 01 	call	0x38e	; 0x38e <displaySensor>

        state = STATE_TEMP;
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 45e:	0f c0       	rjmp	.+30     	; 0x47e <__vector_13+0x66>

    // Get temperature
    case STATE_TEMP:
        // WRITE YOUR CODE HERE
        lcd_clrscr();
 460:	0e 94 00 01 	call	0x200	; 0x200 <lcd_clrscr>

        displaySensor("TEMPERATURE", addr, 0x02);
 464:	42 e0       	ldi	r20, 0x02	; 2
 466:	6c e5       	ldi	r22, 0x5C	; 92
 468:	8c e1       	ldi	r24, 0x1C	; 28
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	0e 94 c7 01 	call	0x38e	; 0x38e <displaySensor>

        state = STATE_HUMID;
 470:	82 e0       	ldi	r24, 0x02	; 2
 472:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 476:	03 c0       	rjmp	.+6      	; 0x47e <__vector_13+0x66>

    default:
        state = STATE_TEMP;
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
    }
}
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	bf 91       	pop	r27
 484:	af 91       	pop	r26
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	7f 91       	pop	r23
 48c:	6f 91       	pop	r22
 48e:	5f 91       	pop	r21
 490:	4f 91       	pop	r20
 492:	3f 91       	pop	r19
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 4a0:	87 b1       	in	r24, 0x07	; 7
 4a2:	8f 7c       	andi	r24, 0xCF	; 207
 4a4:	87 b9       	out	0x07, r24	; 7
 4a6:	88 b1       	in	r24, 0x08	; 8
 4a8:	80 63       	ori	r24, 0x30	; 48
 4aa:	88 b9       	out	0x08, r24	; 8
 4ac:	e9 eb       	ldi	r30, 0xB9	; 185
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	8c 7f       	andi	r24, 0xFC	; 252
 4b4:	80 83       	st	Z, r24
 4b6:	88 e9       	ldi	r24, 0x98	; 152
 4b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 4bc:	08 95       	ret

000004be <twi_start>:
 4be:	94 ea       	ldi	r25, 0xA4	; 164
 4c0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4c4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4c8:	99 23       	and	r25, r25
 4ca:	e4 f7       	brge	.-8      	; 0x4c4 <twi_start+0x6>
 4cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 4d0:	84 e8       	ldi	r24, 0x84	; 132
 4d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4da:	88 23       	and	r24, r24
 4dc:	e4 f7       	brge	.-8      	; 0x4d6 <twi_start+0x18>
 4de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4e2:	88 7f       	andi	r24, 0xF8	; 248
 4e4:	88 31       	cpi	r24, 0x18	; 24
 4e6:	21 f0       	breq	.+8      	; 0x4f0 <twi_start+0x32>
 4e8:	80 34       	cpi	r24, 0x40	; 64
 4ea:	21 f4       	brne	.+8      	; 0x4f4 <twi_start+0x36>
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	08 95       	ret
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	08 95       	ret
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	08 95       	ret

000004f8 <twi_write>:
 4f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 4fc:	84 e8       	ldi	r24, 0x84	; 132
 4fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 502:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 506:	88 23       	and	r24, r24
 508:	e4 f7       	brge	.-8      	; 0x502 <twi_write+0xa>
 50a:	08 95       	ret

0000050c <twi_read_ack>:
 50c:	84 ec       	ldi	r24, 0xC4	; 196
 50e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 512:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 516:	88 23       	and	r24, r24
 518:	e4 f7       	brge	.-8      	; 0x512 <twi_read_ack+0x6>
 51a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 51e:	08 95       	ret

00000520 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 520:	84 e9       	ldi	r24, 0x94	; 148
 522:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 526:	08 95       	ret

00000528 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	2f 93       	push	r18
 534:	8f 93       	push	r24
 536:	9f 93       	push	r25
 538:	ef 93       	push	r30
 53a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 53c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 540:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 544:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 546:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <UART_RxHead>
 54a:	ef 5f       	subi	r30, 0xFF	; 255
 54c:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 54e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <UART_RxTail>
 552:	e9 17       	cp	r30, r25
 554:	39 f0       	breq	.+14     	; 0x564 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 556:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	e3 5d       	subi	r30, 0xD3	; 211
 55e:	fe 4f       	sbci	r31, 0xFE	; 254
 560:	20 83       	st	Z, r18
 562:	01 c0       	rjmp	.+2      	; 0x566 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 564:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 566:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <__data_end>
 56a:	89 2b       	or	r24, r25
 56c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
}
 570:	ff 91       	pop	r31
 572:	ef 91       	pop	r30
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	2f 91       	pop	r18
 57a:	0f 90       	pop	r0
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	0f 90       	pop	r0
 580:	1f 90       	pop	r1
 582:	18 95       	reti

00000584 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 584:	1f 92       	push	r1
 586:	0f 92       	push	r0
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	0f 92       	push	r0
 58c:	11 24       	eor	r1, r1
 58e:	8f 93       	push	r24
 590:	9f 93       	push	r25
 592:	ef 93       	push	r30
 594:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 596:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <UART_TxHead>
 59a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <UART_TxTail>
 59e:	98 17       	cp	r25, r24
 5a0:	69 f0       	breq	.+26     	; 0x5bc <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 5a2:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <UART_TxTail>
 5a6:	ef 5f       	subi	r30, 0xFF	; 255
 5a8:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 5aa:	e0 93 2b 01 	sts	0x012B, r30	; 0x80012b <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	e3 5b       	subi	r30, 0xB3	; 179
 5b2:	fe 4f       	sbci	r31, 0xFE	; 254
 5b4:	80 81       	ld	r24, Z
 5b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 5bc:	e1 ec       	ldi	r30, 0xC1	; 193
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	8f 7d       	andi	r24, 0xDF	; 223
 5c4:	80 83       	st	Z, r24
    }
}
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	9f 91       	pop	r25
 5cc:	8f 91       	pop	r24
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <__itoa_ncheck>:
 5d8:	bb 27       	eor	r27, r27
 5da:	4a 30       	cpi	r20, 0x0A	; 10
 5dc:	31 f4       	brne	.+12     	; 0x5ea <__itoa_ncheck+0x12>
 5de:	99 23       	and	r25, r25
 5e0:	22 f4       	brpl	.+8      	; 0x5ea <__itoa_ncheck+0x12>
 5e2:	bd e2       	ldi	r27, 0x2D	; 45
 5e4:	90 95       	com	r25
 5e6:	81 95       	neg	r24
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__utoa_common>

000005ee <__utoa_ncheck>:
 5ee:	bb 27       	eor	r27, r27

000005f0 <__utoa_common>:
 5f0:	fb 01       	movw	r30, r22
 5f2:	55 27       	eor	r21, r21
 5f4:	aa 27       	eor	r26, r26
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	aa 1f       	adc	r26, r26
 5fc:	a4 17       	cp	r26, r20
 5fe:	10 f0       	brcs	.+4      	; 0x604 <__utoa_common+0x14>
 600:	a4 1b       	sub	r26, r20
 602:	83 95       	inc	r24
 604:	50 51       	subi	r21, 0x10	; 16
 606:	b9 f7       	brne	.-18     	; 0x5f6 <__utoa_common+0x6>
 608:	a0 5d       	subi	r26, 0xD0	; 208
 60a:	aa 33       	cpi	r26, 0x3A	; 58
 60c:	08 f0       	brcs	.+2      	; 0x610 <__utoa_common+0x20>
 60e:	a9 5d       	subi	r26, 0xD9	; 217
 610:	a1 93       	st	Z+, r26
 612:	00 97       	sbiw	r24, 0x00	; 0
 614:	79 f7       	brne	.-34     	; 0x5f4 <__utoa_common+0x4>
 616:	b1 11       	cpse	r27, r1
 618:	b1 93       	st	Z+, r27
 61a:	11 92       	st	Z+, r1
 61c:	cb 01       	movw	r24, r22
 61e:	0c 94 11 03 	jmp	0x622	; 0x622 <strrev>

00000622 <strrev>:
 622:	dc 01       	movw	r26, r24
 624:	fc 01       	movw	r30, r24
 626:	67 2f       	mov	r22, r23
 628:	71 91       	ld	r23, Z+
 62a:	77 23       	and	r23, r23
 62c:	e1 f7       	brne	.-8      	; 0x626 <strrev+0x4>
 62e:	32 97       	sbiw	r30, 0x02	; 2
 630:	04 c0       	rjmp	.+8      	; 0x63a <strrev+0x18>
 632:	7c 91       	ld	r23, X
 634:	6d 93       	st	X+, r22
 636:	70 83       	st	Z, r23
 638:	62 91       	ld	r22, -Z
 63a:	ae 17       	cp	r26, r30
 63c:	bf 07       	cpc	r27, r31
 63e:	c8 f3       	brcs	.-14     	; 0x632 <strrev+0x10>
 640:	08 95       	ret

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
