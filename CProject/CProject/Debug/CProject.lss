
CProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000514  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800144  00800144  000005ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000151f  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7a  00000000  00000000  00001cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a89  00000000  00000000  0000283d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  000032c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000664  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba9  00000000  00000000  00003c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000047d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_18>
  4c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 38       	cpi	r26, 0x89	; 137
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  9e:	0c 94 88 02 	jmp	0x510	; 0x510 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:
*************************************************************************/
void lcd_data(uint8_t data)
{
    /* FRYZA: RW PIN NOT IMPLEMENTED ==> DO NOT USE READ FUNCTION */
    /* lcd_waitbusy(); */
    lcd_write(data, 1);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 eb       	ldi	r24, 0xB7	; 183
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_gotoxy>:
{
    #if LCD_LINES == 1
    lcd_command((1 << LCD_DDRAM) + LCD_START_LINE1 + x);
    #endif
    #if LCD_LINES == 2
    if (y == 0)
 1a2:	61 11       	cpse	r22, r1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_gotoxy+0xc>
        lcd_command((1 << LCD_DDRAM) + LCD_START_LINE1 + x);
 1a6:	80 58       	subi	r24, 0x80	; 128
 1a8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1ac:	08 95       	ret
    else
        lcd_command((1 << LCD_DDRAM) + LCD_START_LINE2 + x);
 1ae:	80 54       	subi	r24, 0x40	; 64
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret

000001b6 <main>:
    //lcd_init(LCD_DISP_ON);
    //lcd_gotoxy(8,1);
    //lcd_puts("test");
    
    // Initialize I2C (TWI)
    twi_init();
 1b6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 1ba:	87 e6       	ldi	r24, 0x67	; 103
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 16 02 	call	0x42c	; 0x42c <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
 1c2:	e1 e8       	ldi	r30, 0x81	; 129
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	8a 7f       	andi	r24, 0xFA	; 250
 1ca:	80 83       	st	Z, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 1d2:	ef e6       	ldi	r30, 0x6F	; 111
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 1dc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 46 02 	call	0x48c	; 0x48c <uart_puts>
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0x30>

000001e8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and get humidity, temperature,
 *           and checksum from DHT12 sensor.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	4f 93       	push	r20
 1f8:	5f 93       	push	r21
 1fa:	6f 93       	push	r22
 1fc:	7f 93       	push	r23
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	00 d0       	rcall	.+0      	; 0x210 <__vector_13+0x28>
 210:	00 d0       	rcall	.+0      	; 0x212 <__vector_13+0x2a>
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 0x5c;  // I2C slave address of DHT12
    //uint8_t value;               // Data obtained from the I2C bus
    char uart_string[] = "000";  // String for converting numbers by itoa()
 216:	80 e3       	ldi	r24, 0x30	; 48
 218:	90 e3       	ldi	r25, 0x30	; 48
 21a:	9a 83       	std	Y+2, r25	; 0x02
 21c:	89 83       	std	Y+1, r24	; 0x01
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	9c 83       	std	Y+4, r25	; 0x04
 224:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t result = 1;

    // FSM
    switch (state)
 226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	a9 f0       	breq	.+42     	; 0x258 <__vector_13+0x70>
 22e:	18 f4       	brcc	.+6      	; 0x236 <__vector_13+0x4e>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	31 f0       	breq	.+12     	; 0x240 <__vector_13+0x58>
 234:	45 c0       	rjmp	.+138    	; 0x2c0 <__vector_13+0xd8>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	d9 f0       	breq	.+54     	; 0x270 <__vector_13+0x88>
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	c9 f1       	breq	.+114    	; 0x2b0 <__vector_13+0xc8>
 23e:	40 c0       	rjmp	.+128    	; 0x2c0 <__vector_13+0xd8>
    {
    // Do nothing
    case STATE_IDLE:
        lcd_gotoxy(1,1);
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
        //lcd_puts("      ");
        uart_puts("IDLE: \n");
 248:	8f e1       	ldi	r24, 0x1F	; 31
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 46 02 	call	0x48c	; 0x48c <uart_puts>
        state = STATE_HUMID;
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 256:	37 c0       	rjmp	.+110    	; 0x2c6 <__vector_13+0xde>
    
    // Get humidity
    case STATE_HUMID:
        lcd_gotoxy(1,1);
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
        //lcd_puts("      ");
        uart_puts("HUMID: \n");
 260:	87 e2       	ldi	r24, 0x27	; 39
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 46 02 	call	0x48c	; 0x48c <uart_puts>
        state = STATE_TEMP;
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 26e:	2b c0       	rjmp	.+86     	; 0x2c6 <__vector_13+0xde>
    // Get temperature
    case STATE_TEMP:
        // WRITE YOUR CODE HERE
        //lcd_gotoxy(1,1);
        //lcd_puts("      ");
        uart_puts("TEMP: \n");
 270:	80 e3       	ldi	r24, 0x30	; 48
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 46 02 	call	0x48c	; 0x48c <uart_puts>
        
        twi_start((addr<<1) + TWI_WRITE);
 278:	88 eb       	ldi	r24, 0xB8	; 184
 27a:	0e 94 89 01 	call	0x312	; 0x312 <twi_start>
        twi_write(0x02);
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	0e 94 a6 01 	call	0x34c	; 0x34c <twi_write>
        twi_stop();
 284:	0e 94 ba 01 	call	0x374	; 0x374 <twi_stop>
        
        twi_start((addr<<1) + TWI_READ);
 288:	89 eb       	ldi	r24, 0xB9	; 185
 28a:	0e 94 89 01 	call	0x312	; 0x312 <twi_start>
        result = twi_read_ack();
 28e:	0e 94 b0 01 	call	0x360	; 0x360 <twi_read_ack>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 292:	4a e0       	ldi	r20, 0x0A	; 10
 294:	be 01       	movw	r22, r28
 296:	6f 5f       	subi	r22, 0xFF	; 255
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__itoa_ncheck>
        
        itoa(result, uart_string, 10);
        
        //lcd_gotoxy(1, 2);
        //lcd_puts("      ");
        uart_puts(uart_string);
 2a0:	ce 01       	movw	r24, r28
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	0e 94 46 02 	call	0x48c	; 0x48c <uart_puts>
        // Move to the next state
        state = STATE_CHECK;
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 2ae:	0b c0       	rjmp	.+22     	; 0x2c6 <__vector_13+0xde>

    // Get checksum
    case STATE_CHECK:
        //lcd_gotoxy(1,1);
        //lcd_puts("      ");
        uart_puts("CHECKSUM: \n");
 2b0:	88 e3       	ldi	r24, 0x38	; 56
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 46 02 	call	0x48c	; 0x48c <uart_puts>
        // Move to the next state
        state = STATE_IDLE;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 2be:	03 c0       	rjmp	.+6      	; 0x2c6 <__vector_13+0xde>

    default:
        state = STATE_IDLE;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
    }
}
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <twi_init>:
 2f4:	87 b1       	in	r24, 0x07	; 7
 2f6:	8f 7c       	andi	r24, 0xCF	; 207
 2f8:	87 b9       	out	0x07, r24	; 7
 2fa:	88 b1       	in	r24, 0x08	; 8
 2fc:	80 63       	ori	r24, 0x30	; 48
 2fe:	88 b9       	out	0x08, r24	; 8
 300:	e9 eb       	ldi	r30, 0xB9	; 185
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	8c 7f       	andi	r24, 0xFC	; 252
 308:	80 83       	st	Z, r24
 30a:	88 e9       	ldi	r24, 0x98	; 152
 30c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 310:	08 95       	ret

00000312 <twi_start>:
 312:	94 ea       	ldi	r25, 0xA4	; 164
 314:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 318:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 31c:	99 23       	and	r25, r25
 31e:	e4 f7       	brge	.-8      	; 0x318 <twi_start+0x6>
 320:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 324:	84 e8       	ldi	r24, 0x84	; 132
 326:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 32a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 32e:	88 23       	and	r24, r24
 330:	e4 f7       	brge	.-8      	; 0x32a <twi_start+0x18>
 332:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 336:	88 7f       	andi	r24, 0xF8	; 248
 338:	88 31       	cpi	r24, 0x18	; 24
 33a:	21 f0       	breq	.+8      	; 0x344 <twi_start+0x32>
 33c:	80 34       	cpi	r24, 0x40	; 64
 33e:	21 f4       	brne	.+8      	; 0x348 <twi_start+0x36>
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	08 95       	ret
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	08 95       	ret
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	08 95       	ret

0000034c <twi_write>:
 34c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 350:	84 e8       	ldi	r24, 0x84	; 132
 352:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 356:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 35a:	88 23       	and	r24, r24
 35c:	e4 f7       	brge	.-8      	; 0x356 <twi_write+0xa>
 35e:	08 95       	ret

00000360 <twi_read_ack>:
 360:	84 ec       	ldi	r24, 0xC4	; 196
 362:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 366:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 36a:	88 23       	and	r24, r24
 36c:	e4 f7       	brge	.-8      	; 0x366 <twi_read_ack+0x6>
 36e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 372:	08 95       	ret

00000374 <twi_stop>:
 374:	84 e9       	ldi	r24, 0x94	; 148
 376:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 37a:	08 95       	ret

0000037c <__vector_18>:
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	2f 93       	push	r18
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
 390:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 394:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 398:	8c 71       	andi	r24, 0x1C	; 28
 39a:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <UART_RxHead>
 39e:	ef 5f       	subi	r30, 0xFF	; 255
 3a0:	ef 71       	andi	r30, 0x1F	; 31
 3a2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <UART_RxTail>
 3a6:	e9 17       	cp	r30, r25
 3a8:	39 f0       	breq	.+14     	; 0x3b8 <__vector_18+0x3c>
 3aa:	e0 93 46 01 	sts	0x0146, r30	; 0x800146 <UART_RxHead>
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	e7 5b       	subi	r30, 0xB7	; 183
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	20 83       	st	Z, r18
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <__vector_18+0x3e>
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <__data_end>
 3be:	89 2b       	or	r24, r25
 3c0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	2f 91       	pop	r18
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_19>:
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
 3ea:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <UART_TxHead>
 3ee:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <UART_TxTail>
 3f2:	98 17       	cp	r25, r24
 3f4:	69 f0       	breq	.+26     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3f6:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <UART_TxTail>
 3fa:	ef 5f       	subi	r30, 0xFF	; 255
 3fc:	ef 71       	andi	r30, 0x1F	; 31
 3fe:	e0 93 47 01 	sts	0x0147, r30	; 0x800147 <UART_TxTail>
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	e7 59       	subi	r30, 0x97	; 151
 406:	fe 4f       	sbci	r31, 0xFE	; 254
 408:	80 81       	ld	r24, Z
 40a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 40e:	05 c0       	rjmp	.+10     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 410:	e1 ec       	ldi	r30, 0xC1	; 193
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	8f 7d       	andi	r24, 0xDF	; 223
 418:	80 83       	st	Z, r24
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <uart_init>:
 42c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <UART_TxHead>
 430:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <UART_TxTail>
 434:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_RxHead>
 438:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_RxTail>
 43c:	28 2f       	mov	r18, r24
 43e:	39 2f       	mov	r19, r25
 440:	33 23       	and	r19, r19
 442:	1c f4       	brge	.+6      	; 0x44a <uart_init+0x1e>
 444:	22 e0       	ldi	r18, 0x02	; 2
 446:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 44a:	90 78       	andi	r25, 0x80	; 128
 44c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 450:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 454:	88 e9       	ldi	r24, 0x98	; 152
 456:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 45a:	86 e0       	ldi	r24, 0x06	; 6
 45c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 460:	08 95       	ret

00000462 <uart_putc>:
 462:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <UART_TxHead>
 466:	2f 5f       	subi	r18, 0xFF	; 255
 468:	2f 71       	andi	r18, 0x1F	; 31
 46a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <UART_TxTail>
 46e:	29 17       	cp	r18, r25
 470:	e1 f3       	breq	.-8      	; 0x46a <uart_putc+0x8>
 472:	e2 2f       	mov	r30, r18
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	e7 59       	subi	r30, 0x97	; 151
 478:	fe 4f       	sbci	r31, 0xFE	; 254
 47a:	80 83       	st	Z, r24
 47c:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <UART_TxHead>
 480:	e1 ec       	ldi	r30, 0xC1	; 193
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	80 62       	ori	r24, 0x20	; 32
 488:	80 83       	st	Z, r24
 48a:	08 95       	ret

0000048c <uart_puts>:
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	ec 01       	movw	r28, r24
 492:	03 c0       	rjmp	.+6      	; 0x49a <uart_puts+0xe>
 494:	21 96       	adiw	r28, 0x01	; 1
 496:	0e 94 31 02 	call	0x462	; 0x462 <uart_putc>
 49a:	88 81       	ld	r24, Y
 49c:	81 11       	cpse	r24, r1
 49e:	fa cf       	rjmp	.-12     	; 0x494 <uart_puts+0x8>
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <__itoa_ncheck>:
 4a6:	bb 27       	eor	r27, r27
 4a8:	4a 30       	cpi	r20, 0x0A	; 10
 4aa:	31 f4       	brne	.+12     	; 0x4b8 <__itoa_ncheck+0x12>
 4ac:	99 23       	and	r25, r25
 4ae:	22 f4       	brpl	.+8      	; 0x4b8 <__itoa_ncheck+0x12>
 4b0:	bd e2       	ldi	r27, 0x2D	; 45
 4b2:	90 95       	com	r25
 4b4:	81 95       	neg	r24
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__utoa_common>

000004bc <__utoa_ncheck>:
 4bc:	bb 27       	eor	r27, r27

000004be <__utoa_common>:
 4be:	fb 01       	movw	r30, r22
 4c0:	55 27       	eor	r21, r21
 4c2:	aa 27       	eor	r26, r26
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	aa 1f       	adc	r26, r26
 4ca:	a4 17       	cp	r26, r20
 4cc:	10 f0       	brcs	.+4      	; 0x4d2 <__utoa_common+0x14>
 4ce:	a4 1b       	sub	r26, r20
 4d0:	83 95       	inc	r24
 4d2:	50 51       	subi	r21, 0x10	; 16
 4d4:	b9 f7       	brne	.-18     	; 0x4c4 <__utoa_common+0x6>
 4d6:	a0 5d       	subi	r26, 0xD0	; 208
 4d8:	aa 33       	cpi	r26, 0x3A	; 58
 4da:	08 f0       	brcs	.+2      	; 0x4de <__utoa_common+0x20>
 4dc:	a9 5d       	subi	r26, 0xD9	; 217
 4de:	a1 93       	st	Z+, r26
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	79 f7       	brne	.-34     	; 0x4c2 <__utoa_common+0x4>
 4e4:	b1 11       	cpse	r27, r1
 4e6:	b1 93       	st	Z+, r27
 4e8:	11 92       	st	Z+, r1
 4ea:	cb 01       	movw	r24, r22
 4ec:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <strrev>

000004f0 <strrev>:
 4f0:	dc 01       	movw	r26, r24
 4f2:	fc 01       	movw	r30, r24
 4f4:	67 2f       	mov	r22, r23
 4f6:	71 91       	ld	r23, Z+
 4f8:	77 23       	and	r23, r23
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <strrev+0x4>
 4fc:	32 97       	sbiw	r30, 0x02	; 2
 4fe:	04 c0       	rjmp	.+8      	; 0x508 <strrev+0x18>
 500:	7c 91       	ld	r23, X
 502:	6d 93       	st	X+, r22
 504:	70 83       	st	Z, r23
 506:	62 91       	ld	r22, -Z
 508:	ae 17       	cp	r26, r30
 50a:	bf 07       	cpc	r27, r31
 50c:	c8 f3       	brcs	.-14     	; 0x500 <strrev+0x10>
 50e:	08 95       	ret

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
