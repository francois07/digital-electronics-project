
CProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000c3e  00000cd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800146  00800146  00000d18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c81  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3e  00000000  00000000  00002bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f4f  00000000  00000000  000038ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  00004840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074a  00000000  00000000  00004c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010ba  00000000  00000000  0000539e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__vector_18>
  4c:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e4       	ldi	r26, 0x46	; 70
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 38       	cpi	r26, 0x8C	; 140
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b1 02 	call	0x562	; 0x562 <main>
  9e:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name |= (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_toggle>:

/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num){
	*reg_name ^= (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_toggle+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_toggle+0xa>
  ea:	24 27       	eor	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <toggle_e+0x8>
  fc:	00 00       	nop
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	85 b9       	out	0x05, r24	; 5
 104:	08 95       	ret

00000106 <lcd_write>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	66 23       	and	r22, r22
 10c:	21 f0       	breq	.+8      	; 0x116 <lcd_write+0x10>
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	81 60       	ori	r24, 0x01	; 1
 112:	85 b9       	out	0x05, r24	; 5
 114:	03 c0       	rjmp	.+6      	; 0x11c <lcd_write+0x16>
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	8a b1       	in	r24, 0x0a	; 10
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	8a b9       	out	0x0a, r24	; 10
 122:	8a b1       	in	r24, 0x0a	; 10
 124:	80 62       	ori	r24, 0x20	; 32
 126:	8a b9       	out	0x0a, r24	; 10
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	8a b9       	out	0x0a, r24	; 10
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	80 68       	ori	r24, 0x80	; 128
 132:	8a b9       	out	0x0a, r24	; 10
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 77       	andi	r24, 0x7F	; 127
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7d       	andi	r24, 0xDF	; 223
 144:	8b b9       	out	0x0b, r24	; 11
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	8b b9       	out	0x0b, r24	; 11
 14c:	cc 23       	and	r28, r28
 14e:	1c f4       	brge	.+6      	; 0x156 <lcd_write+0x50>
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8b b9       	out	0x0b, r24	; 11
 156:	c6 ff       	sbrs	r28, 6
 158:	03 c0       	rjmp	.+6      	; 0x160 <lcd_write+0x5a>
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	c5 ff       	sbrs	r28, 5
 162:	03 c0       	rjmp	.+6      	; 0x16a <lcd_write+0x64>
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	80 62       	ori	r24, 0x20	; 32
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	c4 ff       	sbrs	r28, 4
 16c:	03 c0       	rjmp	.+6      	; 0x174 <lcd_write+0x6e>
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 61       	ori	r24, 0x10	; 16
 172:	8b b9       	out	0x0b, r24	; 11
 174:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	8f 77       	andi	r24, 0x7F	; 127
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 7d       	andi	r24, 0xDF	; 223
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	c3 ff       	sbrs	r28, 3
 192:	03 c0       	rjmp	.+6      	; 0x19a <lcd_write+0x94>
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	80 68       	ori	r24, 0x80	; 128
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	c2 ff       	sbrs	r28, 2
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <lcd_write+0x9e>
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	c1 ff       	sbrs	r28, 1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <lcd_write+0xa8>
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	c0 ff       	sbrs	r28, 0
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_write+0xb2>
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	87 eb       	ldi	r24, 0xB7	; 183
 1d6:	9b e0       	ldi	r25, 0x0B	; 11
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_write+0xd2>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_write+0xd8>
 1de:	00 00       	nop
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_command>:
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 1ea:	08 95       	ret

000001ec <lcd_data>:
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 1f2:	08 95       	ret

000001f4 <lcd_gotoxy>:
 1f4:	61 11       	cpse	r22, r1
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <lcd_gotoxy+0xc>
 1f8:	80 58       	subi	r24, 0x80	; 128
 1fa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 1fe:	08 95       	ret
 200:	80 54       	subi	r24, 0x40	; 64
 202:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 206:	08 95       	ret

00000208 <lcd_clrscr>:
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 20e:	08 95       	ret

00000210 <lcd_putc>:
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 216:	08 95       	ret

00000218 <lcd_puts>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	fc 01       	movw	r30, r24
 21e:	03 c0       	rjmp	.+6      	; 0x226 <lcd_puts+0xe>
 220:	0e 94 08 01 	call	0x210	; 0x210 <lcd_putc>
 224:	fe 01       	movw	r30, r28
 226:	ef 01       	movw	r28, r30
 228:	21 96       	adiw	r28, 0x01	; 1
 22a:	80 81       	ld	r24, Z
 22c:	81 11       	cpse	r24, r1
 22e:	f8 cf       	rjmp	.-16     	; 0x220 <lcd_puts+0x8>
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 236:	cf 93       	push	r28
 238:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 240:	8a b1       	in	r24, 0x0a	; 10
 242:	80 62       	ori	r24, 0x20	; 32
 244:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 246:	84 b1       	in	r24, 0x04	; 4
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 24c:	8a b1       	in	r24, 0x0a	; 10
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 252:	8a b1       	in	r24, 0x0a	; 10
 254:	80 62       	ori	r24, 0x20	; 32
 256:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 258:	8a b1       	in	r24, 0x0a	; 10
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 25e:	8a b1       	in	r24, 0x0a	; 10
 260:	80 68       	ori	r24, 0x80	; 128
 262:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	99 ef       	ldi	r25, 0xF9	; 249
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x32>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x38>
 26e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	80 62       	ori	r24, 0x20	; 32
 274:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	80 61       	ori	r24, 0x10	; 16
 27a:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 27c:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 280:	8f e1       	ldi	r24, 0x1F	; 31
 282:	9e e4       	ldi	r25, 0x4E	; 78
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x4e>
 288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_init+0x54>
 28a:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 28c:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <lcd_init+0x5e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <lcd_init+0x64>
 29a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 29c:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_init+0x6e>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <lcd_init+0x74>
 2aa:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	8f 7e       	andi	r24, 0xEF	; 239
 2b0:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2b2:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_init+0x84>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_init+0x8a>
 2c0:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2c8:	88 e0       	ldi	r24, 0x08	; 8
 2ca:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2ce:	0e 94 04 01 	call	0x208	; 0x208 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2d8:	8c 2f       	mov	r24, r28
 2da:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
}/* lcd_init */
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <rotateMotor>:
                period			How many times to cycle
				pulse			Pulse width in us
 * Returns:     none
 **********************************************************************/
void rotateMotor(volatile uint8_t *reg_name, uint8_t pin_num, uint8_t period, uint64_t pulse)
{
 2e2:	2f 92       	push	r2
 2e4:	3f 92       	push	r3
 2e6:	4f 92       	push	r4
 2e8:	5f 92       	push	r5
 2ea:	6f 92       	push	r6
 2ec:	7f 92       	push	r7
 2ee:	8f 92       	push	r8
 2f0:	9f 92       	push	r9
 2f2:	af 92       	push	r10
 2f4:	bf 92       	push	r11
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	2a 97       	sbiw	r28, 0x0a	; 10
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
 316:	9a 83       	std	Y+2, r25	; 0x02
 318:	89 83       	std	Y+1, r24	; 0x01
 31a:	76 2e       	mov	r7, r22
 31c:	64 2e       	mov	r6, r20
 31e:	4c 2c       	mov	r4, r12
 320:	3d 2c       	mov	r3, r13
 322:	2e 2c       	mov	r2, r14
 324:	fe 82       	std	Y+6, r15	; 0x06
 326:	1f 83       	std	Y+7, r17	; 0x07
 328:	28 87       	std	Y+8, r18	; 0x08
 32a:	53 2e       	mov	r5, r19
    GPIO_write_low(reg_name, pin_num);
 32c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	for(uint8_t i=0; i < period; i++){
 330:	10 e0       	ldi	r17, 0x00	; 0
 332:	29 81       	ldd	r18, Y+1	; 0x01
 334:	3a 81       	ldd	r19, Y+2	; 0x02
 336:	3a 87       	std	Y+10, r19	; 0x0a
 338:	29 87       	std	Y+9, r18	; 0x09
 33a:	b0 c0       	rjmp	.+352    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 33c:	e0 e9       	ldi	r30, 0x90	; 144
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <rotateMotor+0x5e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	02 c0       	rjmp	.+4      	; 0x34c <rotateMotor+0x6a>
 348:	88 ec       	ldi	r24, 0xC8	; 200
 34a:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	b1 f7       	brne	.-20     	; 0x33c <rotateMotor+0x5a>
 350:	89 85       	ldd	r24, Y+9	; 0x09
 352:	9a 85       	ldd	r25, Y+10	; 0x0a
		_delay_ms(20);
		GPIO_toggle(reg_name, pin_num);
 354:	67 2d       	mov	r22, r7
 356:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
		_delay_us(pulse);
 35a:	24 2d       	mov	r18, r4
 35c:	33 2d       	mov	r19, r3
 35e:	42 2d       	mov	r20, r2
 360:	5e 81       	ldd	r21, Y+6	; 0x06
 362:	60 2f       	mov	r22, r16
 364:	7f 81       	ldd	r23, Y+7	; 0x07
 366:	88 85       	ldd	r24, Y+8	; 0x08
 368:	95 2d       	mov	r25, r5
 36a:	0e 94 c3 04 	call	0x986	; 0x986 <__floatundisf>
 36e:	6b 01       	movw	r12, r22
 370:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 372:	2b ea       	ldi	r18, 0xAB	; 171
 374:	3a ea       	ldi	r19, 0xAA	; 170
 376:	4a ea       	ldi	r20, 0xAA	; 170
 378:	50 e4       	ldi	r21, 0x40	; 64
 37a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__mulsf3>
 37e:	4b 01       	movw	r8, r22
 380:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
 382:	20 e0       	ldi	r18, 0x00	; 0
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	40 e8       	ldi	r20, 0x80	; 128
 388:	50 e4       	ldi	r21, 0x40	; 64
 38a:	c7 01       	movw	r24, r14
 38c:	b6 01       	movw	r22, r12
 38e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__mulsf3>
 392:	69 83       	std	Y+1, r22	; 0x01
 394:	7a 83       	std	Y+2, r23	; 0x02
 396:	8b 83       	std	Y+3, r24	; 0x03
 398:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	40 e8       	ldi	r20, 0x80	; 128
 3a0:	5f e3       	ldi	r21, 0x3F	; 63
 3a2:	c5 01       	movw	r24, r10
 3a4:	b4 01       	movw	r22, r8
 3a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__cmpsf2>
 3aa:	88 23       	and	r24, r24
 3ac:	0c f4       	brge	.+2      	; 0x3b0 <rotateMotor+0xce>
 3ae:	6b c0       	rjmp	.+214    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		__ticks = 1;
	else if (__tmp2 > 65535)
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	3f ef       	ldi	r19, 0xFF	; 255
 3b4:	4f e7       	ldi	r20, 0x7F	; 127
 3b6:	57 e4       	ldi	r21, 0x47	; 71
 3b8:	69 81       	ldd	r22, Y+1	; 0x01
 3ba:	7a 81       	ldd	r23, Y+2	; 0x02
 3bc:	8b 81       	ldd	r24, Y+3	; 0x03
 3be:	9c 81       	ldd	r25, Y+4	; 0x04
 3c0:	0e 94 76 05 	call	0xaec	; 0xaec <__gesf2>
 3c4:	18 16       	cp	r1, r24
 3c6:	0c f0       	brlt	.+2      	; 0x3ca <rotateMotor+0xe8>
 3c8:	44 c0       	rjmp	.+136    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
	{
		_delay_ms(__us / 1000.0);
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	4a e7       	ldi	r20, 0x7A	; 122
 3d0:	54 e4       	ldi	r21, 0x44	; 68
 3d2:	c7 01       	movw	r24, r14
 3d4:	b6 01       	movw	r22, r12
 3d6:	0e 94 22 04 	call	0x844	; 0x844 <__divsf3>
 3da:	4b 01       	movw	r8, r22
 3dc:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	4a e7       	ldi	r20, 0x7A	; 122
 3e4:	55 e4       	ldi	r21, 0x45	; 69
 3e6:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__mulsf3>
 3ea:	6b 01       	movw	r12, r22
 3ec:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	40 e8       	ldi	r20, 0x80	; 128
 3f4:	5f e3       	ldi	r21, 0x3F	; 63
 3f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__cmpsf2>
 3fa:	88 23       	and	r24, r24
 3fc:	24 f1       	brlt	.+72     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
		__ticks = 1;
	else if (__tmp > 65535)
 3fe:	20 e0       	ldi	r18, 0x00	; 0
 400:	3f ef       	ldi	r19, 0xFF	; 255
 402:	4f e7       	ldi	r20, 0x7F	; 127
 404:	57 e4       	ldi	r21, 0x47	; 71
 406:	c7 01       	movw	r24, r14
 408:	b6 01       	movw	r22, r12
 40a:	0e 94 76 05 	call	0xaec	; 0xaec <__gesf2>
 40e:	18 16       	cp	r1, r24
 410:	ac f4       	brge	.+42     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	40 e2       	ldi	r20, 0x20	; 32
 418:	51 e4       	ldi	r21, 0x41	; 65
 41a:	c5 01       	movw	r24, r10
 41c:	b4 01       	movw	r22, r8
 41e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__mulsf3>
 422:	0e 94 94 04 	call	0x928	; 0x928 <__fixunssfsi>
 426:	06 c0       	rjmp	.+12     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 428:	80 e9       	ldi	r24, 0x90	; 144
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 430:	61 50       	subi	r22, 0x01	; 1
 432:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 434:	61 15       	cp	r22, r1
 436:	71 05       	cpc	r23, r1
 438:	b9 f7       	brne	.-18     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 43a:	27 c0       	rjmp	.+78     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 43c:	c7 01       	movw	r24, r14
 43e:	b6 01       	movw	r22, r12
 440:	0e 94 94 04 	call	0x928	; 0x928 <__fixunssfsi>
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	cb 01       	movw	r24, r22
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 450:	1c c0       	rjmp	.+56     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	4f e7       	ldi	r20, 0x7F	; 127
 458:	53 e4       	ldi	r21, 0x43	; 67
 45a:	c5 01       	movw	r24, r10
 45c:	b4 01       	movw	r22, r8
 45e:	0e 94 76 05 	call	0xaec	; 0xaec <__gesf2>
 462:	18 16       	cp	r1, r24
 464:	54 f4       	brge	.+20     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 466:	69 81       	ldd	r22, Y+1	; 0x01
 468:	7a 81       	ldd	r23, Y+2	; 0x02
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	9c 81       	ldd	r25, Y+4	; 0x04
 46e:	0e 94 94 04 	call	0x928	; 0x928 <__fixunssfsi>
 472:	cb 01       	movw	r24, r22
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 478:	0b c0       	rjmp	.+22     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 47a:	c5 01       	movw	r24, r10
 47c:	b4 01       	movw	r22, r8
 47e:	0e 94 94 04 	call	0x928	; 0x928 <__fixunssfsi>
 482:	6d 83       	std	Y+5, r22	; 0x05
 484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	9d 83       	std	Y+5, r25	; 0x05
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 48a:	8d 81       	ldd	r24, Y+5	; 0x05
 48c:	8a 95       	dec	r24
 48e:	f1 f7       	brne	.-4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
		GPIO_toggle(reg_name, pin_num);
 490:	67 2d       	mov	r22, r7
 492:	89 85       	ldd	r24, Y+9	; 0x09
 494:	9a 85       	ldd	r25, Y+10	; 0x0a
 496:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
 * Returns:     none
 **********************************************************************/
void rotateMotor(volatile uint8_t *reg_name, uint8_t pin_num, uint8_t period, uint64_t pulse)
{
    GPIO_write_low(reg_name, pin_num);
	for(uint8_t i=0; i < period; i++){
 49a:	1f 5f       	subi	r17, 0xFF	; 255
 49c:	16 15       	cp	r17, r6
 49e:	08 f4       	brcc	.+2      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a0:	53 cf       	rjmp	.-346    	; 0x348 <rotateMotor+0x66>
		_delay_ms(20);
		GPIO_toggle(reg_name, pin_num);
		_delay_us(pulse);
		GPIO_toggle(reg_name, pin_num);
	}
}
 4a2:	2a 96       	adiw	r28, 0x0a	; 10
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	ff 90       	pop	r15
 4b8:	ef 90       	pop	r14
 4ba:	df 90       	pop	r13
 4bc:	cf 90       	pop	r12
 4be:	bf 90       	pop	r11
 4c0:	af 90       	pop	r10
 4c2:	9f 90       	pop	r9
 4c4:	8f 90       	pop	r8
 4c6:	7f 90       	pop	r7
 4c8:	6f 90       	pop	r6
 4ca:	5f 90       	pop	r5
 4cc:	4f 90       	pop	r4
 4ce:	3f 90       	pop	r3
 4d0:	2f 90       	pop	r2
 4d2:	08 95       	ret

000004d4 <displaySensor>:
                slave_adress    Sensor slave adress
                reg_adress      Data register address on the sensor
 * Returns:     The displayed information
 **********************************************************************/
uint8_t displaySensor(char title[], uint8_t slave_adress, uint8_t reg_adress)
{
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	00 d0       	rcall	.+0      	; 0x4e2 <displaySensor+0xe>
 4e2:	00 d0       	rcall	.+0      	; 0x4e4 <displaySensor+0x10>
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
 4e8:	7c 01       	movw	r14, r24
 4ea:	16 2f       	mov	r17, r22
 4ec:	04 2f       	mov	r16, r20
    uint8_t result = 1;
    char res_string[] = "000";
 4ee:	80 e3       	ldi	r24, 0x30	; 48
 4f0:	90 e3       	ldi	r25, 0x30	; 48
 4f2:	9a 83       	std	Y+2, r25	; 0x02
 4f4:	89 83       	std	Y+1, r24	; 0x01
 4f6:	80 e3       	ldi	r24, 0x30	; 48
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	9c 83       	std	Y+4, r25	; 0x04
 4fc:	8b 83       	std	Y+3, r24	; 0x03
    
    lcd_gotoxy(1, 0);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
    lcd_puts(title);
 506:	c7 01       	movw	r24, r14
 508:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
        
    twi_start((slave_adress<<1) + TWI_WRITE);
 50c:	11 0f       	add	r17, r17
 50e:	81 2f       	mov	r24, r17
 510:	0e 94 90 03 	call	0x720	; 0x720 <twi_start>
    twi_write(reg_adress);
 514:	80 2f       	mov	r24, r16
 516:	0e 94 ad 03 	call	0x75a	; 0x75a <twi_write>
    twi_stop();
 51a:	0e 94 c1 03 	call	0x782	; 0x782 <twi_stop>
        
    twi_start((slave_adress<<1) + TWI_READ);
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	81 0f       	add	r24, r17
 522:	0e 94 90 03 	call	0x720	; 0x720 <twi_start>
    result = twi_read_ack();
 526:	0e 94 b7 03 	call	0x76e	; 0x76e <twi_read_ack>
 52a:	18 2f       	mov	r17, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 52c:	4a e0       	ldi	r20, 0x0A	; 10
 52e:	be 01       	movw	r22, r28
 530:	6f 5f       	subi	r22, 0xFF	; 255
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__itoa_ncheck>
        
    itoa(result, res_string, 10);
        
    lcd_gotoxy(0, 1);
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
    lcd_puts(res_string);
 542:	ce 01       	movw	r24, r28
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
    
    return result;
}
 54a:	81 2f       	mov	r24, r17
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	08 95       	ret

00000562 <main>:
 * Returns:     none
 **********************************************************************/
int main(void)
{
    // Initialize LCD Display
    lcd_init(LCD_DISP_ON);
 562:	8c e0       	ldi	r24, 0x0C	; 12
 564:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_init>
    
	lcd_command(1 << LCD_CGRAM);
 568:	80 e4       	ldi	r24, 0x40	; 64
 56a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
	for (uint8_t i = 0; i < 24; i++)
 56e:	c0 e0       	ldi	r28, 0x00	; 0
 570:	08 c0       	rjmp	.+16     	; 0x582 <main+0x20>
	{
    	// Store all new chars to memory line by line
    	lcd_data(customChar[i]);
 572:	ec 2f       	mov	r30, r28
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	ef 5f       	subi	r30, 0xFF	; 255
 578:	fe 4f       	sbci	r31, 0xFE	; 254
 57a:	80 81       	ld	r24, Z
 57c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_data>
{
    // Initialize LCD Display
    lcd_init(LCD_DISP_ON);
    
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 24; i++)
 580:	cf 5f       	subi	r28, 0xFF	; 255
 582:	c8 31       	cpi	r28, 0x18	; 24
 584:	b0 f3       	brcs	.-20     	; 0x572 <main+0x10>
	{
    	// Store all new chars to memory line by line
    	lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 586:	80 e8       	ldi	r24, 0x80	; 128
 588:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>

	// Welcome screen
    lcd_gotoxy(0, 0);
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
    lcd_puts("De2");
 594:	89 e1       	ldi	r24, 0x19	; 25
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
    lcd_gotoxy(0, 1);
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
    lcd_puts("Meteo Station");
 5a4:	8d e1       	ldi	r24, 0x1D	; 29
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
    
    // Initialize I2C (TWI)
    twi_init();
 5ac:	0e 94 81 03 	call	0x702	; 0x702 <twi_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_4s();
 5b0:	e1 e8       	ldi	r30, 0x81	; 129
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	8d 7f       	andi	r24, 0xFD	; 253
 5b8:	80 83       	st	Z, r24
 5ba:	80 81       	ld	r24, Z
 5bc:	85 60       	ori	r24, 0x05	; 5
 5be:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 5c0:	ef e6       	ldi	r30, 0x6F	; 111
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	81 60       	ori	r24, 0x01	; 1
 5c8:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 5ca:	78 94       	sei
    
    // Configure the motor at port D
    GPIO_config_output(&DDRD, MOTOR1);
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	8a e2       	ldi	r24, 0x2A	; 42
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>

    // Infinite loop
    while (1)
    {
		rotateMotor(&PORTD, MOTOR1, 20, 1500);
 5d6:	0f 2e       	mov	r0, r31
 5d8:	fc ed       	ldi	r31, 0xDC	; 220
 5da:	cf 2e       	mov	r12, r31
 5dc:	f0 2d       	mov	r31, r0
 5de:	0f 2e       	mov	r0, r31
 5e0:	f5 e0       	ldi	r31, 0x05	; 5
 5e2:	df 2e       	mov	r13, r31
 5e4:	f0 2d       	mov	r31, r0
 5e6:	e1 2c       	mov	r14, r1
 5e8:	f1 2c       	mov	r15, r1
 5ea:	00 e0       	ldi	r16, 0x00	; 0
 5ec:	10 e0       	ldi	r17, 0x00	; 0
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	44 e1       	ldi	r20, 0x14	; 20
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	8b e2       	ldi	r24, 0x2B	; 43
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <rotateMotor>
		rotateMotor(&PORTD, MOTOR1, 20, 2000);
 5fe:	0f 2e       	mov	r0, r31
 600:	f0 ed       	ldi	r31, 0xD0	; 208
 602:	cf 2e       	mov	r12, r31
 604:	f0 2d       	mov	r31, r0
 606:	0f 2e       	mov	r0, r31
 608:	f7 e0       	ldi	r31, 0x07	; 7
 60a:	df 2e       	mov	r13, r31
 60c:	f0 2d       	mov	r31, r0
 60e:	20 e0       	ldi	r18, 0x00	; 0
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	44 e1       	ldi	r20, 0x14	; 20
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	8b e2       	ldi	r24, 0x2B	; 43
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <rotateMotor>
		rotateMotor(&PORTD, MOTOR1, 20, 1000);
 61e:	0f 2e       	mov	r0, r31
 620:	f8 ee       	ldi	r31, 0xE8	; 232
 622:	cf 2e       	mov	r12, r31
 624:	f0 2d       	mov	r31, r0
 626:	0f 2e       	mov	r0, r31
 628:	f3 e0       	ldi	r31, 0x03	; 3
 62a:	df 2e       	mov	r13, r31
 62c:	f0 2d       	mov	r31, r0
 62e:	20 e0       	ldi	r18, 0x00	; 0
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	44 e1       	ldi	r20, 0x14	; 20
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	8b e2       	ldi	r24, 0x2B	; 43
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <rotateMotor>
 63e:	cb cf       	rjmp	.-106    	; 0x5d6 <main+0x74>

00000640 <__vector_13>:
 * Function:	Timer/Counter1 overflow interrupt
 * Purpose:		Update Finite State Machine and get humidity, temperature,
 *				and checksum from DHT12 sensor.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	2f 93       	push	r18
 64c:	3f 93       	push	r19
 64e:	4f 93       	push	r20
 650:	5f 93       	push	r21
 652:	6f 93       	push	r22
 654:	7f 93       	push	r23
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
 65a:	af 93       	push	r26
 65c:	bf 93       	push	r27
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
    static state_t state = STATE_TEMP;  // Current state of the FSM
    static uint8_t addr = 0x5c;  // I2C slave address of DHT12
    static uint8_t res;

    // FSM
    switch (state)
 662:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 666:	82 30       	cpi	r24, 0x02	; 2
 668:	19 f0       	breq	.+6      	; 0x670 <__vector_13+0x30>
 66a:	83 30       	cpi	r24, 0x03	; 3
 66c:	d1 f0       	breq	.+52     	; 0x6a2 <__vector_13+0x62>
 66e:	35 c0       	rjmp	.+106    	; 0x6da <__vector_13+0x9a>
    {
    // Get humidity
    case STATE_HUMID:
        lcd_clrscr();
 670:	0e 94 04 01 	call	0x208	; 0x208 <lcd_clrscr>
        
        res = displaySensor("HUMIDITY", addr, 0x00);
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	6c e5       	ldi	r22, 0x5C	; 92
 678:	8b e2       	ldi	r24, 0x2B	; 43
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <displaySensor>
 680:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
        lcd_puts("% ");
 684:	84 e3       	ldi	r24, 0x34	; 52
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
        
        if (res >= 16)
 68c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 690:	80 31       	cpi	r24, 0x10	; 16
 692:	18 f0       	brcs	.+6      	; 0x69a <__vector_13+0x5a>
        {
            lcd_putc(1);
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	0e 94 08 01 	call	0x210	; 0x210 <lcd_putc>
        }

        state = STATE_TEMP;
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 6a0:	1f c0       	rjmp	.+62     	; 0x6e0 <__vector_13+0xa0>

    // Get temperature
    case STATE_TEMP:
        lcd_clrscr();
 6a2:	0e 94 04 01 	call	0x208	; 0x208 <lcd_clrscr>

        res = displaySensor("TEMPERATURE", addr, 0x02);
 6a6:	42 e0       	ldi	r20, 0x02	; 2
 6a8:	6c e5       	ldi	r22, 0x5C	; 92
 6aa:	87 e3       	ldi	r24, 0x37	; 55
 6ac:	91 e0       	ldi	r25, 0x01	; 1
 6ae:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <displaySensor>
 6b2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
        lcd_putc(2);
 6b6:	82 e0       	ldi	r24, 0x02	; 2
 6b8:	0e 94 08 01 	call	0x210	; 0x210 <lcd_putc>
        lcd_puts("C ");
 6bc:	83 e4       	ldi	r24, 0x43	; 67
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
        
        if (res >= 16)
 6c4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 6c8:	80 31       	cpi	r24, 0x10	; 16
 6ca:	18 f0       	brcs	.+6      	; 0x6d2 <__vector_13+0x92>
        {
            lcd_putc(0);
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	0e 94 08 01 	call	0x210	; 0x210 <lcd_putc>
        }

        state = STATE_HUMID;
 6d2:	82 e0       	ldi	r24, 0x02	; 2
 6d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <__vector_13+0xa0>

    default:
        state = STATE_TEMP;
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
    }
}
 6e0:	ff 91       	pop	r31
 6e2:	ef 91       	pop	r30
 6e4:	bf 91       	pop	r27
 6e6:	af 91       	pop	r26
 6e8:	9f 91       	pop	r25
 6ea:	8f 91       	pop	r24
 6ec:	7f 91       	pop	r23
 6ee:	6f 91       	pop	r22
 6f0:	5f 91       	pop	r21
 6f2:	4f 91       	pop	r20
 6f4:	3f 91       	pop	r19
 6f6:	2f 91       	pop	r18
 6f8:	0f 90       	pop	r0
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	0f 90       	pop	r0
 6fe:	1f 90       	pop	r1
 700:	18 95       	reti

00000702 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 702:	87 b1       	in	r24, 0x07	; 7
 704:	8f 7c       	andi	r24, 0xCF	; 207
 706:	87 b9       	out	0x07, r24	; 7
 708:	88 b1       	in	r24, 0x08	; 8
 70a:	80 63       	ori	r24, 0x30	; 48
 70c:	88 b9       	out	0x08, r24	; 8
 70e:	e9 eb       	ldi	r30, 0xB9	; 185
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	8c 7f       	andi	r24, 0xFC	; 252
 716:	80 83       	st	Z, r24
 718:	88 e9       	ldi	r24, 0x98	; 152
 71a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 71e:	08 95       	ret

00000720 <twi_start>:
 720:	94 ea       	ldi	r25, 0xA4	; 164
 722:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 726:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 72a:	99 23       	and	r25, r25
 72c:	e4 f7       	brge	.-8      	; 0x726 <twi_start+0x6>
 72e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 732:	84 e8       	ldi	r24, 0x84	; 132
 734:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 738:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 73c:	88 23       	and	r24, r24
 73e:	e4 f7       	brge	.-8      	; 0x738 <twi_start+0x18>
 740:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 744:	88 7f       	andi	r24, 0xF8	; 248
 746:	88 31       	cpi	r24, 0x18	; 24
 748:	21 f0       	breq	.+8      	; 0x752 <twi_start+0x32>
 74a:	80 34       	cpi	r24, 0x40	; 64
 74c:	21 f4       	brne	.+8      	; 0x756 <twi_start+0x36>
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	08 95       	ret
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	08 95       	ret
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	08 95       	ret

0000075a <twi_write>:
 75a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 75e:	84 e8       	ldi	r24, 0x84	; 132
 760:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 764:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 768:	88 23       	and	r24, r24
 76a:	e4 f7       	brge	.-8      	; 0x764 <twi_write+0xa>
 76c:	08 95       	ret

0000076e <twi_read_ack>:
 76e:	84 ec       	ldi	r24, 0xC4	; 196
 770:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 774:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 778:	88 23       	and	r24, r24
 77a:	e4 f7       	brge	.-8      	; 0x774 <twi_read_ack+0x6>
 77c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 780:	08 95       	ret

00000782 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 782:	84 e9       	ldi	r24, 0x94	; 148
 784:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 788:	08 95       	ret

0000078a <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 78a:	1f 92       	push	r1
 78c:	0f 92       	push	r0
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	0f 92       	push	r0
 792:	11 24       	eor	r1, r1
 794:	2f 93       	push	r18
 796:	8f 93       	push	r24
 798:	9f 93       	push	r25
 79a:	ef 93       	push	r30
 79c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 79e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 7a2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 7a6:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 7a8:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <UART_RxHead>
 7ac:	ef 5f       	subi	r30, 0xFF	; 255
 7ae:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 7b0:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <UART_RxTail>
 7b4:	e9 17       	cp	r30, r25
 7b6:	39 f0       	breq	.+14     	; 0x7c6 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 7b8:	e0 93 49 01 	sts	0x0149, r30	; 0x800149 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	e4 5b       	subi	r30, 0xB4	; 180
 7c0:	fe 4f       	sbci	r31, 0xFE	; 254
 7c2:	20 83       	st	Z, r18
 7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 7c6:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 7c8:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <UART_LastRxError>
 7cc:	89 2b       	or	r24, r25
 7ce:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <UART_LastRxError>
}
 7d2:	ff 91       	pop	r31
 7d4:	ef 91       	pop	r30
 7d6:	9f 91       	pop	r25
 7d8:	8f 91       	pop	r24
 7da:	2f 91       	pop	r18
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 7e6:	1f 92       	push	r1
 7e8:	0f 92       	push	r0
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	0f 92       	push	r0
 7ee:	11 24       	eor	r1, r1
 7f0:	8f 93       	push	r24
 7f2:	9f 93       	push	r25
 7f4:	ef 93       	push	r30
 7f6:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 7f8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <UART_TxHead>
 7fc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <UART_TxTail>
 800:	98 17       	cp	r25, r24
 802:	69 f0       	breq	.+26     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 804:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <UART_TxTail>
 808:	ef 5f       	subi	r30, 0xFF	; 255
 80a:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 80c:	e0 93 4a 01 	sts	0x014A, r30	; 0x80014a <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	e4 59       	subi	r30, 0x94	; 148
 814:	fe 4f       	sbci	r31, 0xFE	; 254
 816:	80 81       	ld	r24, Z
 818:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 81c:	05 c0       	rjmp	.+10     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 81e:	e1 ec       	ldi	r30, 0xC1	; 193
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	8f 7d       	andi	r24, 0xDF	; 223
 826:	80 83       	st	Z, r24
    }
}
 828:	ff 91       	pop	r31
 82a:	ef 91       	pop	r30
 82c:	9f 91       	pop	r25
 82e:	8f 91       	pop	r24
 830:	0f 90       	pop	r0
 832:	0f be       	out	0x3f, r0	; 63
 834:	0f 90       	pop	r0
 836:	1f 90       	pop	r1
 838:	18 95       	reti

0000083a <__cmpsf2>:
 83a:	0e 94 01 05 	call	0xa02	; 0xa02 <__fp_cmp>
 83e:	08 f4       	brcc	.+2      	; 0x842 <__cmpsf2+0x8>
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	08 95       	ret

00000844 <__divsf3>:
 844:	0e 94 36 04 	call	0x86c	; 0x86c <__divsf3x>
 848:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_round>
 84c:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_pscB>
 850:	58 f0       	brcs	.+22     	; 0x868 <__divsf3+0x24>
 852:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscA>
 856:	40 f0       	brcs	.+16     	; 0x868 <__divsf3+0x24>
 858:	29 f4       	brne	.+10     	; 0x864 <__divsf3+0x20>
 85a:	5f 3f       	cpi	r21, 0xFF	; 255
 85c:	29 f0       	breq	.+10     	; 0x868 <__divsf3+0x24>
 85e:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_inf>
 862:	51 11       	cpse	r21, r1
 864:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_szero>
 868:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_nan>

0000086c <__divsf3x>:
 86c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_split3>
 870:	68 f3       	brcs	.-38     	; 0x84c <__divsf3+0x8>

00000872 <__divsf3_pse>:
 872:	99 23       	and	r25, r25
 874:	b1 f3       	breq	.-20     	; 0x862 <__divsf3+0x1e>
 876:	55 23       	and	r21, r21
 878:	91 f3       	breq	.-28     	; 0x85e <__divsf3+0x1a>
 87a:	95 1b       	sub	r25, r21
 87c:	55 0b       	sbc	r21, r21
 87e:	bb 27       	eor	r27, r27
 880:	aa 27       	eor	r26, r26
 882:	62 17       	cp	r22, r18
 884:	73 07       	cpc	r23, r19
 886:	84 07       	cpc	r24, r20
 888:	38 f0       	brcs	.+14     	; 0x898 <__divsf3_pse+0x26>
 88a:	9f 5f       	subi	r25, 0xFF	; 255
 88c:	5f 4f       	sbci	r21, 0xFF	; 255
 88e:	22 0f       	add	r18, r18
 890:	33 1f       	adc	r19, r19
 892:	44 1f       	adc	r20, r20
 894:	aa 1f       	adc	r26, r26
 896:	a9 f3       	breq	.-22     	; 0x882 <__divsf3_pse+0x10>
 898:	35 d0       	rcall	.+106    	; 0x904 <__stack+0x5>
 89a:	0e 2e       	mov	r0, r30
 89c:	3a f0       	brmi	.+14     	; 0x8ac <__divsf3_pse+0x3a>
 89e:	e0 e8       	ldi	r30, 0x80	; 128
 8a0:	32 d0       	rcall	.+100    	; 0x906 <__stack+0x7>
 8a2:	91 50       	subi	r25, 0x01	; 1
 8a4:	50 40       	sbci	r21, 0x00	; 0
 8a6:	e6 95       	lsr	r30
 8a8:	00 1c       	adc	r0, r0
 8aa:	ca f7       	brpl	.-14     	; 0x89e <__divsf3_pse+0x2c>
 8ac:	2b d0       	rcall	.+86     	; 0x904 <__stack+0x5>
 8ae:	fe 2f       	mov	r31, r30
 8b0:	29 d0       	rcall	.+82     	; 0x904 <__stack+0x5>
 8b2:	66 0f       	add	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	88 1f       	adc	r24, r24
 8b8:	bb 1f       	adc	r27, r27
 8ba:	26 17       	cp	r18, r22
 8bc:	37 07       	cpc	r19, r23
 8be:	48 07       	cpc	r20, r24
 8c0:	ab 07       	cpc	r26, r27
 8c2:	b0 e8       	ldi	r27, 0x80	; 128
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <__divsf3_pse+0x56>
 8c6:	bb 0b       	sbc	r27, r27
 8c8:	80 2d       	mov	r24, r0
 8ca:	bf 01       	movw	r22, r30
 8cc:	ff 27       	eor	r31, r31
 8ce:	93 58       	subi	r25, 0x83	; 131
 8d0:	5f 4f       	sbci	r21, 0xFF	; 255
 8d2:	3a f0       	brmi	.+14     	; 0x8e2 <__divsf3_pse+0x70>
 8d4:	9e 3f       	cpi	r25, 0xFE	; 254
 8d6:	51 05       	cpc	r21, r1
 8d8:	78 f0       	brcs	.+30     	; 0x8f8 <__divsf3_pse+0x86>
 8da:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_inf>
 8de:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_szero>
 8e2:	5f 3f       	cpi	r21, 0xFF	; 255
 8e4:	e4 f3       	brlt	.-8      	; 0x8de <__divsf3_pse+0x6c>
 8e6:	98 3e       	cpi	r25, 0xE8	; 232
 8e8:	d4 f3       	brlt	.-12     	; 0x8de <__divsf3_pse+0x6c>
 8ea:	86 95       	lsr	r24
 8ec:	77 95       	ror	r23
 8ee:	67 95       	ror	r22
 8f0:	b7 95       	ror	r27
 8f2:	f7 95       	ror	r31
 8f4:	9f 5f       	subi	r25, 0xFF	; 255
 8f6:	c9 f7       	brne	.-14     	; 0x8ea <__divsf3_pse+0x78>
 8f8:	88 0f       	add	r24, r24
 8fa:	91 1d       	adc	r25, r1
 8fc:	96 95       	lsr	r25
 8fe:	87 95       	ror	r24
 900:	97 f9       	bld	r25, 7
 902:	08 95       	ret
 904:	e1 e0       	ldi	r30, 0x01	; 1
 906:	66 0f       	add	r22, r22
 908:	77 1f       	adc	r23, r23
 90a:	88 1f       	adc	r24, r24
 90c:	bb 1f       	adc	r27, r27
 90e:	62 17       	cp	r22, r18
 910:	73 07       	cpc	r23, r19
 912:	84 07       	cpc	r24, r20
 914:	ba 07       	cpc	r27, r26
 916:	20 f0       	brcs	.+8      	; 0x920 <__stack+0x21>
 918:	62 1b       	sub	r22, r18
 91a:	73 0b       	sbc	r23, r19
 91c:	84 0b       	sbc	r24, r20
 91e:	ba 0b       	sbc	r27, r26
 920:	ee 1f       	adc	r30, r30
 922:	88 f7       	brcc	.-30     	; 0x906 <__stack+0x7>
 924:	e0 95       	com	r30
 926:	08 95       	ret

00000928 <__fixunssfsi>:
 928:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_splitA>
 92c:	88 f0       	brcs	.+34     	; 0x950 <__fixunssfsi+0x28>
 92e:	9f 57       	subi	r25, 0x7F	; 127
 930:	98 f0       	brcs	.+38     	; 0x958 <__fixunssfsi+0x30>
 932:	b9 2f       	mov	r27, r25
 934:	99 27       	eor	r25, r25
 936:	b7 51       	subi	r27, 0x17	; 23
 938:	b0 f0       	brcs	.+44     	; 0x966 <__fixunssfsi+0x3e>
 93a:	e1 f0       	breq	.+56     	; 0x974 <__fixunssfsi+0x4c>
 93c:	66 0f       	add	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	88 1f       	adc	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	1a f0       	brmi	.+6      	; 0x94c <__fixunssfsi+0x24>
 946:	ba 95       	dec	r27
 948:	c9 f7       	brne	.-14     	; 0x93c <__fixunssfsi+0x14>
 94a:	14 c0       	rjmp	.+40     	; 0x974 <__fixunssfsi+0x4c>
 94c:	b1 30       	cpi	r27, 0x01	; 1
 94e:	91 f0       	breq	.+36     	; 0x974 <__fixunssfsi+0x4c>
 950:	0e 94 6f 05 	call	0xade	; 0xade <__fp_zero>
 954:	b1 e0       	ldi	r27, 0x01	; 1
 956:	08 95       	ret
 958:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_zero>
 95c:	67 2f       	mov	r22, r23
 95e:	78 2f       	mov	r23, r24
 960:	88 27       	eor	r24, r24
 962:	b8 5f       	subi	r27, 0xF8	; 248
 964:	39 f0       	breq	.+14     	; 0x974 <__fixunssfsi+0x4c>
 966:	b9 3f       	cpi	r27, 0xF9	; 249
 968:	cc f3       	brlt	.-14     	; 0x95c <__fixunssfsi+0x34>
 96a:	86 95       	lsr	r24
 96c:	77 95       	ror	r23
 96e:	67 95       	ror	r22
 970:	b3 95       	inc	r27
 972:	d9 f7       	brne	.-10     	; 0x96a <__fixunssfsi+0x42>
 974:	3e f4       	brtc	.+14     	; 0x984 <__fixunssfsi+0x5c>
 976:	90 95       	com	r25
 978:	80 95       	com	r24
 97a:	70 95       	com	r23
 97c:	61 95       	neg	r22
 97e:	7f 4f       	sbci	r23, 0xFF	; 255
 980:	8f 4f       	sbci	r24, 0xFF	; 255
 982:	9f 4f       	sbci	r25, 0xFF	; 255
 984:	08 95       	ret

00000986 <__floatundisf>:
 986:	e8 94       	clt

00000988 <__fp_di2sf>:
 988:	f9 2f       	mov	r31, r25
 98a:	96 eb       	ldi	r25, 0xB6	; 182
 98c:	ff 23       	and	r31, r31
 98e:	81 f0       	breq	.+32     	; 0x9b0 <__fp_di2sf+0x28>
 990:	12 16       	cp	r1, r18
 992:	13 06       	cpc	r1, r19
 994:	14 06       	cpc	r1, r20
 996:	44 0b       	sbc	r20, r20
 998:	93 95       	inc	r25
 99a:	f6 95       	lsr	r31
 99c:	87 95       	ror	r24
 99e:	77 95       	ror	r23
 9a0:	67 95       	ror	r22
 9a2:	57 95       	ror	r21
 9a4:	40 40       	sbci	r20, 0x00	; 0
 9a6:	ff 23       	and	r31, r31
 9a8:	b9 f7       	brne	.-18     	; 0x998 <__fp_di2sf+0x10>
 9aa:	1b c0       	rjmp	.+54     	; 0x9e2 <__fp_di2sf+0x5a>
 9ac:	99 27       	eor	r25, r25
 9ae:	08 95       	ret
 9b0:	88 23       	and	r24, r24
 9b2:	51 f4       	brne	.+20     	; 0x9c8 <__fp_di2sf+0x40>
 9b4:	98 50       	subi	r25, 0x08	; 8
 9b6:	d2 f7       	brpl	.-12     	; 0x9ac <__fp_di2sf+0x24>
 9b8:	87 2b       	or	r24, r23
 9ba:	76 2f       	mov	r23, r22
 9bc:	65 2f       	mov	r22, r21
 9be:	54 2f       	mov	r21, r20
 9c0:	43 2f       	mov	r20, r19
 9c2:	32 2f       	mov	r19, r18
 9c4:	20 e0       	ldi	r18, 0x00	; 0
 9c6:	b1 f3       	breq	.-20     	; 0x9b4 <__fp_di2sf+0x2c>
 9c8:	12 16       	cp	r1, r18
 9ca:	13 06       	cpc	r1, r19
 9cc:	14 06       	cpc	r1, r20
 9ce:	44 0b       	sbc	r20, r20
 9d0:	88 23       	and	r24, r24
 9d2:	3a f0       	brmi	.+14     	; 0x9e2 <__fp_di2sf+0x5a>
 9d4:	9a 95       	dec	r25
 9d6:	44 0f       	add	r20, r20
 9d8:	55 1f       	adc	r21, r21
 9da:	66 1f       	adc	r22, r22
 9dc:	77 1f       	adc	r23, r23
 9de:	88 1f       	adc	r24, r24
 9e0:	ca f7       	brpl	.-14     	; 0x9d4 <__fp_di2sf+0x4c>
 9e2:	55 23       	and	r21, r21
 9e4:	4a f4       	brpl	.+18     	; 0x9f8 <__fp_di2sf+0x70>
 9e6:	44 0f       	add	r20, r20
 9e8:	55 1f       	adc	r21, r21
 9ea:	11 f4       	brne	.+4      	; 0x9f0 <__fp_di2sf+0x68>
 9ec:	60 ff       	sbrs	r22, 0
 9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <__fp_di2sf+0x70>
 9f0:	6f 5f       	subi	r22, 0xFF	; 255
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	88 0f       	add	r24, r24
 9fa:	96 95       	lsr	r25
 9fc:	87 95       	ror	r24
 9fe:	97 f9       	bld	r25, 7
 a00:	08 95       	ret

00000a02 <__fp_cmp>:
 a02:	99 0f       	add	r25, r25
 a04:	00 08       	sbc	r0, r0
 a06:	55 0f       	add	r21, r21
 a08:	aa 0b       	sbc	r26, r26
 a0a:	e0 e8       	ldi	r30, 0x80	; 128
 a0c:	fe ef       	ldi	r31, 0xFE	; 254
 a0e:	16 16       	cp	r1, r22
 a10:	17 06       	cpc	r1, r23
 a12:	e8 07       	cpc	r30, r24
 a14:	f9 07       	cpc	r31, r25
 a16:	c0 f0       	brcs	.+48     	; 0xa48 <__fp_cmp+0x46>
 a18:	12 16       	cp	r1, r18
 a1a:	13 06       	cpc	r1, r19
 a1c:	e4 07       	cpc	r30, r20
 a1e:	f5 07       	cpc	r31, r21
 a20:	98 f0       	brcs	.+38     	; 0xa48 <__fp_cmp+0x46>
 a22:	62 1b       	sub	r22, r18
 a24:	73 0b       	sbc	r23, r19
 a26:	84 0b       	sbc	r24, r20
 a28:	95 0b       	sbc	r25, r21
 a2a:	39 f4       	brne	.+14     	; 0xa3a <__fp_cmp+0x38>
 a2c:	0a 26       	eor	r0, r26
 a2e:	61 f0       	breq	.+24     	; 0xa48 <__fp_cmp+0x46>
 a30:	23 2b       	or	r18, r19
 a32:	24 2b       	or	r18, r20
 a34:	25 2b       	or	r18, r21
 a36:	21 f4       	brne	.+8      	; 0xa40 <__fp_cmp+0x3e>
 a38:	08 95       	ret
 a3a:	0a 26       	eor	r0, r26
 a3c:	09 f4       	brne	.+2      	; 0xa40 <__fp_cmp+0x3e>
 a3e:	a1 40       	sbci	r26, 0x01	; 1
 a40:	a6 95       	lsr	r26
 a42:	8f ef       	ldi	r24, 0xFF	; 255
 a44:	81 1d       	adc	r24, r1
 a46:	81 1d       	adc	r24, r1
 a48:	08 95       	ret

00000a4a <__fp_inf>:
 a4a:	97 f9       	bld	r25, 7
 a4c:	9f 67       	ori	r25, 0x7F	; 127
 a4e:	80 e8       	ldi	r24, 0x80	; 128
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	60 e0       	ldi	r22, 0x00	; 0
 a54:	08 95       	ret

00000a56 <__fp_nan>:
 a56:	9f ef       	ldi	r25, 0xFF	; 255
 a58:	80 ec       	ldi	r24, 0xC0	; 192
 a5a:	08 95       	ret

00000a5c <__fp_pscA>:
 a5c:	00 24       	eor	r0, r0
 a5e:	0a 94       	dec	r0
 a60:	16 16       	cp	r1, r22
 a62:	17 06       	cpc	r1, r23
 a64:	18 06       	cpc	r1, r24
 a66:	09 06       	cpc	r0, r25
 a68:	08 95       	ret

00000a6a <__fp_pscB>:
 a6a:	00 24       	eor	r0, r0
 a6c:	0a 94       	dec	r0
 a6e:	12 16       	cp	r1, r18
 a70:	13 06       	cpc	r1, r19
 a72:	14 06       	cpc	r1, r20
 a74:	05 06       	cpc	r0, r21
 a76:	08 95       	ret

00000a78 <__fp_round>:
 a78:	09 2e       	mov	r0, r25
 a7a:	03 94       	inc	r0
 a7c:	00 0c       	add	r0, r0
 a7e:	11 f4       	brne	.+4      	; 0xa84 <__fp_round+0xc>
 a80:	88 23       	and	r24, r24
 a82:	52 f0       	brmi	.+20     	; 0xa98 <__fp_round+0x20>
 a84:	bb 0f       	add	r27, r27
 a86:	40 f4       	brcc	.+16     	; 0xa98 <__fp_round+0x20>
 a88:	bf 2b       	or	r27, r31
 a8a:	11 f4       	brne	.+4      	; 0xa90 <__fp_round+0x18>
 a8c:	60 ff       	sbrs	r22, 0
 a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__fp_round+0x20>
 a90:	6f 5f       	subi	r22, 0xFF	; 255
 a92:	7f 4f       	sbci	r23, 0xFF	; 255
 a94:	8f 4f       	sbci	r24, 0xFF	; 255
 a96:	9f 4f       	sbci	r25, 0xFF	; 255
 a98:	08 95       	ret

00000a9a <__fp_split3>:
 a9a:	57 fd       	sbrc	r21, 7
 a9c:	90 58       	subi	r25, 0x80	; 128
 a9e:	44 0f       	add	r20, r20
 aa0:	55 1f       	adc	r21, r21
 aa2:	59 f0       	breq	.+22     	; 0xaba <__fp_splitA+0x10>
 aa4:	5f 3f       	cpi	r21, 0xFF	; 255
 aa6:	71 f0       	breq	.+28     	; 0xac4 <__fp_splitA+0x1a>
 aa8:	47 95       	ror	r20

00000aaa <__fp_splitA>:
 aaa:	88 0f       	add	r24, r24
 aac:	97 fb       	bst	r25, 7
 aae:	99 1f       	adc	r25, r25
 ab0:	61 f0       	breq	.+24     	; 0xaca <__fp_splitA+0x20>
 ab2:	9f 3f       	cpi	r25, 0xFF	; 255
 ab4:	79 f0       	breq	.+30     	; 0xad4 <__fp_splitA+0x2a>
 ab6:	87 95       	ror	r24
 ab8:	08 95       	ret
 aba:	12 16       	cp	r1, r18
 abc:	13 06       	cpc	r1, r19
 abe:	14 06       	cpc	r1, r20
 ac0:	55 1f       	adc	r21, r21
 ac2:	f2 cf       	rjmp	.-28     	; 0xaa8 <__fp_split3+0xe>
 ac4:	46 95       	lsr	r20
 ac6:	f1 df       	rcall	.-30     	; 0xaaa <__fp_splitA>
 ac8:	08 c0       	rjmp	.+16     	; 0xada <__fp_splitA+0x30>
 aca:	16 16       	cp	r1, r22
 acc:	17 06       	cpc	r1, r23
 ace:	18 06       	cpc	r1, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	f1 cf       	rjmp	.-30     	; 0xab6 <__fp_splitA+0xc>
 ad4:	86 95       	lsr	r24
 ad6:	71 05       	cpc	r23, r1
 ad8:	61 05       	cpc	r22, r1
 ada:	08 94       	sec
 adc:	08 95       	ret

00000ade <__fp_zero>:
 ade:	e8 94       	clt

00000ae0 <__fp_szero>:
 ae0:	bb 27       	eor	r27, r27
 ae2:	66 27       	eor	r22, r22
 ae4:	77 27       	eor	r23, r23
 ae6:	cb 01       	movw	r24, r22
 ae8:	97 f9       	bld	r25, 7
 aea:	08 95       	ret

00000aec <__gesf2>:
 aec:	0e 94 01 05 	call	0xa02	; 0xa02 <__fp_cmp>
 af0:	08 f4       	brcc	.+2      	; 0xaf4 <__gesf2+0x8>
 af2:	8f ef       	ldi	r24, 0xFF	; 255
 af4:	08 95       	ret

00000af6 <__mulsf3>:
 af6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3x>
 afa:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_round>
 afe:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscA>
 b02:	38 f0       	brcs	.+14     	; 0xb12 <__mulsf3+0x1c>
 b04:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_pscB>
 b08:	20 f0       	brcs	.+8      	; 0xb12 <__mulsf3+0x1c>
 b0a:	95 23       	and	r25, r21
 b0c:	11 f0       	breq	.+4      	; 0xb12 <__mulsf3+0x1c>
 b0e:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_inf>
 b12:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_nan>
 b16:	11 24       	eor	r1, r1
 b18:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_szero>

00000b1c <__mulsf3x>:
 b1c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_split3>
 b20:	70 f3       	brcs	.-36     	; 0xafe <__mulsf3+0x8>

00000b22 <__mulsf3_pse>:
 b22:	95 9f       	mul	r25, r21
 b24:	c1 f3       	breq	.-16     	; 0xb16 <__mulsf3+0x20>
 b26:	95 0f       	add	r25, r21
 b28:	50 e0       	ldi	r21, 0x00	; 0
 b2a:	55 1f       	adc	r21, r21
 b2c:	62 9f       	mul	r22, r18
 b2e:	f0 01       	movw	r30, r0
 b30:	72 9f       	mul	r23, r18
 b32:	bb 27       	eor	r27, r27
 b34:	f0 0d       	add	r31, r0
 b36:	b1 1d       	adc	r27, r1
 b38:	63 9f       	mul	r22, r19
 b3a:	aa 27       	eor	r26, r26
 b3c:	f0 0d       	add	r31, r0
 b3e:	b1 1d       	adc	r27, r1
 b40:	aa 1f       	adc	r26, r26
 b42:	64 9f       	mul	r22, r20
 b44:	66 27       	eor	r22, r22
 b46:	b0 0d       	add	r27, r0
 b48:	a1 1d       	adc	r26, r1
 b4a:	66 1f       	adc	r22, r22
 b4c:	82 9f       	mul	r24, r18
 b4e:	22 27       	eor	r18, r18
 b50:	b0 0d       	add	r27, r0
 b52:	a1 1d       	adc	r26, r1
 b54:	62 1f       	adc	r22, r18
 b56:	73 9f       	mul	r23, r19
 b58:	b0 0d       	add	r27, r0
 b5a:	a1 1d       	adc	r26, r1
 b5c:	62 1f       	adc	r22, r18
 b5e:	83 9f       	mul	r24, r19
 b60:	a0 0d       	add	r26, r0
 b62:	61 1d       	adc	r22, r1
 b64:	22 1f       	adc	r18, r18
 b66:	74 9f       	mul	r23, r20
 b68:	33 27       	eor	r19, r19
 b6a:	a0 0d       	add	r26, r0
 b6c:	61 1d       	adc	r22, r1
 b6e:	23 1f       	adc	r18, r19
 b70:	84 9f       	mul	r24, r20
 b72:	60 0d       	add	r22, r0
 b74:	21 1d       	adc	r18, r1
 b76:	82 2f       	mov	r24, r18
 b78:	76 2f       	mov	r23, r22
 b7a:	6a 2f       	mov	r22, r26
 b7c:	11 24       	eor	r1, r1
 b7e:	9f 57       	subi	r25, 0x7F	; 127
 b80:	50 40       	sbci	r21, 0x00	; 0
 b82:	9a f0       	brmi	.+38     	; 0xbaa <__mulsf3_pse+0x88>
 b84:	f1 f0       	breq	.+60     	; 0xbc2 <__mulsf3_pse+0xa0>
 b86:	88 23       	and	r24, r24
 b88:	4a f0       	brmi	.+18     	; 0xb9c <__mulsf3_pse+0x7a>
 b8a:	ee 0f       	add	r30, r30
 b8c:	ff 1f       	adc	r31, r31
 b8e:	bb 1f       	adc	r27, r27
 b90:	66 1f       	adc	r22, r22
 b92:	77 1f       	adc	r23, r23
 b94:	88 1f       	adc	r24, r24
 b96:	91 50       	subi	r25, 0x01	; 1
 b98:	50 40       	sbci	r21, 0x00	; 0
 b9a:	a9 f7       	brne	.-22     	; 0xb86 <__mulsf3_pse+0x64>
 b9c:	9e 3f       	cpi	r25, 0xFE	; 254
 b9e:	51 05       	cpc	r21, r1
 ba0:	80 f0       	brcs	.+32     	; 0xbc2 <__mulsf3_pse+0xa0>
 ba2:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_inf>
 ba6:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_szero>
 baa:	5f 3f       	cpi	r21, 0xFF	; 255
 bac:	e4 f3       	brlt	.-8      	; 0xba6 <__mulsf3_pse+0x84>
 bae:	98 3e       	cpi	r25, 0xE8	; 232
 bb0:	d4 f3       	brlt	.-12     	; 0xba6 <__mulsf3_pse+0x84>
 bb2:	86 95       	lsr	r24
 bb4:	77 95       	ror	r23
 bb6:	67 95       	ror	r22
 bb8:	b7 95       	ror	r27
 bba:	f7 95       	ror	r31
 bbc:	e7 95       	ror	r30
 bbe:	9f 5f       	subi	r25, 0xFF	; 255
 bc0:	c1 f7       	brne	.-16     	; 0xbb2 <__mulsf3_pse+0x90>
 bc2:	fe 2b       	or	r31, r30
 bc4:	88 0f       	add	r24, r24
 bc6:	91 1d       	adc	r25, r1
 bc8:	96 95       	lsr	r25
 bca:	87 95       	ror	r24
 bcc:	97 f9       	bld	r25, 7
 bce:	08 95       	ret

00000bd0 <__itoa_ncheck>:
 bd0:	bb 27       	eor	r27, r27
 bd2:	4a 30       	cpi	r20, 0x0A	; 10
 bd4:	31 f4       	brne	.+12     	; 0xbe2 <__itoa_ncheck+0x12>
 bd6:	99 23       	and	r25, r25
 bd8:	22 f4       	brpl	.+8      	; 0xbe2 <__itoa_ncheck+0x12>
 bda:	bd e2       	ldi	r27, 0x2D	; 45
 bdc:	90 95       	com	r25
 bde:	81 95       	neg	r24
 be0:	9f 4f       	sbci	r25, 0xFF	; 255
 be2:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__utoa_common>

00000be6 <__utoa_ncheck>:
 be6:	bb 27       	eor	r27, r27

00000be8 <__utoa_common>:
 be8:	fb 01       	movw	r30, r22
 bea:	55 27       	eor	r21, r21
 bec:	aa 27       	eor	r26, r26
 bee:	88 0f       	add	r24, r24
 bf0:	99 1f       	adc	r25, r25
 bf2:	aa 1f       	adc	r26, r26
 bf4:	a4 17       	cp	r26, r20
 bf6:	10 f0       	brcs	.+4      	; 0xbfc <__utoa_common+0x14>
 bf8:	a4 1b       	sub	r26, r20
 bfa:	83 95       	inc	r24
 bfc:	50 51       	subi	r21, 0x10	; 16
 bfe:	b9 f7       	brne	.-18     	; 0xbee <__utoa_common+0x6>
 c00:	a0 5d       	subi	r26, 0xD0	; 208
 c02:	aa 33       	cpi	r26, 0x3A	; 58
 c04:	08 f0       	brcs	.+2      	; 0xc08 <__utoa_common+0x20>
 c06:	a9 5d       	subi	r26, 0xD9	; 217
 c08:	a1 93       	st	Z+, r26
 c0a:	00 97       	sbiw	r24, 0x00	; 0
 c0c:	79 f7       	brne	.-34     	; 0xbec <__utoa_common+0x4>
 c0e:	b1 11       	cpse	r27, r1
 c10:	b1 93       	st	Z+, r27
 c12:	11 92       	st	Z+, r1
 c14:	cb 01       	movw	r24, r22
 c16:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <strrev>

00000c1a <strrev>:
 c1a:	dc 01       	movw	r26, r24
 c1c:	fc 01       	movw	r30, r24
 c1e:	67 2f       	mov	r22, r23
 c20:	71 91       	ld	r23, Z+
 c22:	77 23       	and	r23, r23
 c24:	e1 f7       	brne	.-8      	; 0xc1e <strrev+0x4>
 c26:	32 97       	sbiw	r30, 0x02	; 2
 c28:	04 c0       	rjmp	.+8      	; 0xc32 <strrev+0x18>
 c2a:	7c 91       	ld	r23, X
 c2c:	6d 93       	st	X+, r22
 c2e:	70 83       	st	Z, r23
 c30:	62 91       	ld	r22, -Z
 c32:	ae 17       	cp	r26, r30
 c34:	bf 07       	cpc	r27, r31
 c36:	c8 f3       	brcs	.-14     	; 0xc2a <strrev+0x10>
 c38:	08 95       	ret

00000c3a <_exit>:
 c3a:	f8 94       	cli

00000c3c <__stop_program>:
 c3c:	ff cf       	rjmp	.-2      	; 0xc3c <__stop_program>
